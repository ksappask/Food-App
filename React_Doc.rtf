{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red15\green112\blue1;\red255\green255\blue255;\red0\green0\blue0;
}
{\*\expandedcolortbl;;\cssrgb\c0\c50196\c0;\cssrgb\c100000\c100000\c100000;\csgray\c0;
}
\paperw11900\paperh16840\margl1440\margr1440\vieww27040\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \
Bebel converts jsx to js objects which is used to create virtual Dom  ..then after reconciliation happens\
\
Props => used to pass data from once component to another component\
\
Race => short starting template for a component\
FARCE\
\
Use Effect :\
\
Without Dependent array => it calls every time > that component renders\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
If we have [] Only Once after load chrome tab\cf0 \cb1 \
\cf2 \cb3 [searchText] => every time serachText renders + calls after every change in searchtext\cf0 \cb1 \
\cf2 \cb3 call back will come after every component renders if we have empty array as input\cf0 \cb1 \
\
Don\'92t create a component inside component.
\f0 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 Because, if parent component rendered, it will also render child as well\
\
npx parcel /Users/akash.k/Desktop/React_Projects/Food-App/index.html\
\
Never write useStaete inside if else and for loop\
\
React Router Dom:\
\
createBrowserRouter, RouterProvider, Outlet\
\
2 types of routing\
1) Client Side Routing\
2) Server Side Routing\
\
According to Route, All the children go to Outlet\
\
\
An outlet tag should be present in all parent so that it\'92s child or children of children would get render\
\
\
Class based component\
render() = always with class component\
Why we are using super(props) in constructor\
React Life Cycle  (Constructor => Render Function)\
\
2 phases \
1) render phase\
2) commit phase\
\
Babel => helps in converting jsx to html code\
\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
Always we need to remove eventlisteners
\f0 \cf0 \cb1 \kerning1\expnd0\expndtw0 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \
All are same things only.\
When you have a large components, then it can\'92 be bundled into one file by parcel. We need some things else to split all the code\
\
Lazy Loading / Chunking / Code Splitting / Dynamic Bundling  / On Demand Loading / Dynamic Import\
\pard\pardeftab720\partightenfactor0

\f1 \cf2 \cb3 \expnd0\expndtw0\kerning0
lazy loading/ on demand loading\cf0 \cb1 \
\cf2 \cb3 while lazy loading, react will suspend some time to load the component / js file\cf0 \cb1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 To avoid this issue, we can use Suspense from react 
\f1 \expnd0\expndtw0\kerning0
\

\f0 \kerning1\expnd0\expndtw0 \
\
UI Framework:\
\
Native CSS, SCSS, Styled Components, Material UI, tailwind UI, chakra UI, Boot Strap\
Any UI Framework we can use as per our interest \
\
Tail Wind CSS Framework setup Instructions:\
\
Just follow what\'92s present here in the link : https://tailwindcss.com/docs/guides/parcel\
\
Extension : Tailwind CSS Intellisense\
\
\
Props Drilling. => Multi level props in multi level components\
\
Lifting the state up => INstamert Accordion Example\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \expnd0\expndtw0\kerning0
\
Context => Central Store Space\
\
Using Use Context, we can get the stored values/data/objects\
\
\
Redux => Data Management => Like Context. For small applications, Context is fine . But for Large Applications with Large Components => then Redux is good\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0 \cf0 \kerning1\expnd0\expndtw0 \
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardirnatural\partightenfactor0

\f1\fs22 \cf4 \CocoaLigature0 npm i @reduxjs/toolkit\
\
npm i react-redux 
\f0\fs24 \cf0 \CocoaLigature1 \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f1 \cf0 \expnd0\expndtw0\kerning0
\
1) Dispatch => Action
\f0 \kerning1\expnd0\expndtw0  => Action callas Reducer => Reducer will change the slice of the Redux Store [It will call function and function will modify the data in redux - a central space ]
\f1 \expnd0\expndtw0\kerning0
\
\
2) Slice\
\
3) Selector (Hook - UseSelector) => Used for Reading Data from Redux Store \
\
Next Chapter 12:
\f0 \kerning1\expnd0\expndtw0  1:57:08
\f1 \expnd0\expndtw0\kerning0
\
\
}